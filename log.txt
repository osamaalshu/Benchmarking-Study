For details about installing the optional dependencies, please visit:
    https://docs.monai.io/en/latest/installation.html#installing-the-recommended-dependencies

training image num: 900, validation image num: 100
sanity check: torch.Size([1, 3, 256, 256]) metatensor(0.9561) torch.Size([1, 1, 256, 256]) metatensor(0.)
epoch 1 average loss: 1.7582
epoch 2 average loss: 1.5474
epoch 3 average loss: 1.5408
epoch 4 average loss: 1.5282
epoch 5 average loss: 1.5270
epoch 6 average loss: 1.5293
epoch 7 average loss: 1.5324
epoch 8 average loss: 1.5088
epoch 9 average loss: 1.5264
epoch 10 average loss: 1.5248
epoch 11 average loss: 1.5214
epoch 12 average loss: 1.5117
Traceback (most recent call last):
  File "/content/Benchmarking-Study/utils/model_training_3class.py", line 394, in <module>
    main()
  File "/content/Benchmarking-Study/utils/model_training_3class.py", line 324, in main
    dice_score = dice_metric(y_pred=val_outputs, y=val_labels_onehot)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/monai/metrics/metric.py", line 347, in __call__
    ret = super().__call__(y_pred=y_pred, y=y, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/monai/metrics/metric.py", line 76, in __call__
    return self._compute_list(y_pred, y, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/monai/metrics/metric.py", line 100, in _compute_list
    ret = [
          ^
  File "/usr/local/lib/python3.11/dist-packages/monai/metrics/metric.py", line 101, in <listcomp>
    self._compute_tensor(p.detach().unsqueeze(0), y_.detach().unsqueeze(0), **kwargs)
  File "/usr/local/lib/python3.11/dist-packages/monai/metrics/meandice.py", line 141, in _compute_tensor
    return self.dice_helper(y_pred=y_pred, y=y)  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/monai/metrics/meandice.py", line 332, in __call__
    c_list.append(self.compute_channel(x_pred, x))
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/monai/metrics/meandice.py", line 292, in compute_channel
    return (2.0 * torch.sum(torch.masked_select(y, y_pred))) / (y_o + torch.sum(y_pred))
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/monai/data/meta_tensor.py", line 283, in __torch_function__
    ret = super().__torch_function__(func, types, args, kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/torch/_tensor.py", line 1648, in __torch_function__
    ret = func(*args, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^
RuntimeError: The size of tensor a (256) must match the size of tensor b (1536) at non-singleton dimension 1